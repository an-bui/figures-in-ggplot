[
  {
    "objectID": "code/ggplot-code-TEMPLATE.html",
    "href": "code/ggplot-code-TEMPLATE.html",
    "title": "Figure making in ggplot",
    "section": "",
    "text": "In the spirit of Emily Riederer’s ugliest ggplot ever, we’ll play around with ggplot code in order to learn how it works. The goal: make the ugliest plot possible."
  },
  {
    "objectID": "code/ggplot-code-TEMPLATE.html#manual-selections",
    "href": "code/ggplot-code-TEMPLATE.html#manual-selections",
    "title": "Figure making in ggplot",
    "section": "Manual selections",
    "text": "Manual selections\nYou can adjust the colors, shapes, axis limits, etc. using one of the scale_ functions (try ?scale_ to see the many options)."
  },
  {
    "objectID": "code/ggplot-code-TEMPLATE.html#themes",
    "href": "code/ggplot-code-TEMPLATE.html#themes",
    "title": "Figure making in ggplot",
    "section": "Themes",
    "text": "Themes\nA lot of customization comes from ggplot themes. Theme elements deal with everything else in the plot that doesn’t have to do with the data (e.g. the plot background, grid, etc.). There are a lot of arguments that you can stack up in theme() (try ?theme()) to see all of them, but they generally fall into a few categories: 1. axes, 2. legends, 3. panels, 4, plots, 5, strips. There are built-in themes in ggplot that can make your plot look pretty good right away, but playing around with theme elements yourself is a great way of getting the exact plot you want.\nAdditionally, every argument takes a function modifying the elements: 1. lines, 2. rectangles (more broadly, shapes), 3. text. See the help pages for these functions (e.g. ?element_text()) to figure out what you can alter about each element - there’s a lot!"
  },
  {
    "objectID": "code/ggplot-code-TEMPLATE.html#annotations",
    "href": "code/ggplot-code-TEMPLATE.html#annotations",
    "title": "Figure making in ggplot",
    "section": "Annotations",
    "text": "Annotations\nAnnotations are useful when you want to point something out on a plot. The function is annotate(), which adds an annotation layer onto your plot."
  },
  {
    "objectID": "code/ggplot-code-TEMPLATE.html#labels",
    "href": "code/ggplot-code-TEMPLATE.html#labels",
    "title": "Figure making in ggplot",
    "section": "Labels",
    "text": "Labels\nLastly, you can adjust any text on labels using the labs() function.\nNote: all the code in the theme below comes from Emily Riederer’s gist, with some modifications!\n\ncrab_plot <- ggplot(data = crab_data, aes(x = latitude, y = size)) +\n  geom_jitter(aes(color = site, shape = month), size = 3, alpha = 0.6) +\n  facet_wrap(~ month) +\n  \n  # scaling\n  # \n  scale_color_manual(values = c(\"BC\" = \"#687f47\", \"CC\" = \"#268e86\", \"CT\" = \"#373f1f\", \n                                \"DB\" = \"#03010a\", \"GTM\" = \"#447c49\", \"JC\" = \"#2e2747\", \n                                \"NB\" = \"#7f696a\", \"NIB\" = \"#777a76\", \"PIE\" = \"#a87445\", \n                                \"RC\" = \"#aef23a\", \"SI\" = \"#e05357\", \"VCR\" = \"#087f0c\", \n                                \"ZI\" = \"#010201\")) +\n  # \n  scale_shape_manual(values = c(\"7\" = 21, \"8\" = 18)) +\n  # \n  scale_x_continuous(limits = c(29, 45)) +\n  scale_y_continuous(n.breaks = 10) +\n  \n  # theme() call\n  theme(\n    # \n    panel.background = element_rect(fill = '#B5C7F4', color = '#F761F9', linewidth = 5),\n    panel.border = element_rect(fill = NA, color = \"#87Bf18\", linewidth = 2),\n    panel.grid.major.x = element_line(color = \"#FF21E1\", linetype = 6),\n    panel.grid.minor.x = element_line(color = \"#2D65BF\", linetype = 4),\n    panel.grid.minor.y = element_blank()\n  ) +\n  # another theme() call: you don't have to split things up like this \n  # just doing it for ease of demonstration\n  theme(\n    # \n    plot.background = element_rect(fill = \"#98FC6A\"),\n    plot.title = element_text(size = 30, hjust = 0.25, family = \"Helvetica\"),\n    plot.subtitle = element_text(size = 20, hjust = 0.75, color = \"#2A23A3\", family = \"Times New Roman\"),\n    plot.caption = element_text(size = 10, angle = 25, family = \"Comic Sans MS\"),\n    plot.margin = unit(c(1, 4, 1, 3), \"cm\")\n  ) +\n  theme(\n    # \n    axis.title.x = element_text(face = \"bold.italic\", color = \"#9254D3\"),\n    axis.title.y = element_text(family = \"Arial\", face = \"bold\", size = 20, hjust = 0.25),\n    axis.text = element_text(face = \"italic\", size = 15),\n    # note that axis.text options from above are inherited\n    axis.text.x.bottom = element_text(angle = 180)\n  ) +\n  theme(\n    # \n    strip.background = element_rect(fill = \"#C9E886\"),\n    strip.text = element_text(color = \"#854EED\", family = \"Garamond\", face = \"bold\")\n  ) +\n  theme(\n    # \n    legend.background = element_rect(fill = \"#DC86E8\"), \n    legend.key = element_rect(fill = \"#C2F774\"),\n    legend.direction = \"horizontal\",\n    legend.position = \"top\",\n    legend.justification = \"left\",\n    legend.title = element_text(family = \"serif\", color = \"#B452F9\"),\n    legend.text = element_text(color = \"#30F92C\", family = \"mono\")\n  ) +\n  \n  # \n  annotate(geom = \"text\", x = 32, y = 20, label = \"big gap\", color = \"#CC107D\") +\n  \n  # \n  labs(title = \"Crabs!\",\n       subtitle = \"I love crabs\",\n       x = \"Latitude (low to high)\",\n       y = \"Size (small to big)\",\n       caption = \"Do you love crabs?\",\n       col = \"I love colors!\") \n\ncrab_plot\n\n\n\n\nThe last thing we’ll do is save the plot using ggsave(). The function needs you to tell it what the file name is in the first argument filename, but I’ll show you a little trick I use to 1) save the figure in a folder and 2) “version” the figure based on date (i.e. the file name for the figure has the date it was made in it). Both are extraneous, but things I like to do to keep my figures organized.\n\nggsave(\n  # specify a file name, but here we'll specify a file path\n             # choose the folder named \"figures\"\n  filename = here::here(\"figures\", \n                        # create a file name that includes the date using lubridate::today()\n                        # you could also use Sys.Date() - works the same way!\n                        paste(\"crab_plot_ugly_\", today(), \".jpg\", sep = \"\")),\n  # name the plot object you're wanting to save\n  plot = crab_plot,\n  # specify the dimensions and units\n  width = 10, height = 5, units = \"in\",\n  # specify resolution\n  dpi = 300\n)"
  },
  {
    "objectID": "code/ggplot-code-TEMPLATE.html#adding-images-to-plots",
    "href": "code/ggplot-code-TEMPLATE.html#adding-images-to-plots",
    "title": "Figure making in ggplot",
    "section": "Adding images to plots",
    "text": "Adding images to plots\nThere are many ways of adding images to plots. The package I’ll use is magick. This is a round-about way of getting an image in, but allows you to be flexible with your image types (gifs, etc.). I’ll just save this as an object called crab_image to use later.\n\n# use magick::image_read() to read in the jpeg\ncrab_image <- image_read(here::here(\"code\", \"pwhittle-fiddler-crab.jpeg\")) %>% \n  # turn this into a raster\n  as.raster()"
  },
  {
    "objectID": "code/ggplot-code-TEMPLATE.html#putting-plots-together",
    "href": "code/ggplot-code-TEMPLATE.html#putting-plots-together",
    "title": "Figure making in ggplot",
    "section": "Putting plots together",
    "text": "Putting plots together\nThere are a couple packages you can use to put plots together like panels in a figure. The big ones are patchwork and cowplot. Try each of them out and see what you like, but we’ll be using patchwork today.\nJust to demonstrate how this works, I’m going to make up a histogram of crab sizes. The code is annotated if you’re interested in the customized aesthetics, but they’re not important for this demonstration.\n\n# for a histogram, you don't need y in your aesthetic call\ncrab_hist <- ggplot(crab_data, aes(x = size)) +\n  # telling ggplot that you want to plot a histogram\n  geom_histogram(binwidth = 1, aes(fill = site)) +\n  # some scaling\n  scale_x_continuous(breaks = seq(from = 6.5, to = 24.5, by = 1)) +\n  scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +\n  scale_fill_manual(values = c(\"BC\" = \"#7D9084\", \"CC\" = \"#8B9FD9\", \"CT\" = \"#DDD5D5\", \n                               \"DB\" = \"#CADDA5\", \"GTM\" = \"#DF697F\", \"JC\" = \"#E09E5F\", \n                               \"NB\" = \"#7F56DB\", \"NIB\" = \"#D8DF5D\", \"PIE\" = \"#DC53D3\", \n                               \"RC\" = \"#84D9DF\", \"SI\" = \"#D798D1\", \"VCR\" = \"#77E2A8\", \n                               \"ZI\" = \"#76E762\")) +\n  # some theme-ing\n  theme(\n    panel.background = element_rect(fill = '#B6E45F', color = '#DABA84', linewidth = 5),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"#E16B86\", linetype = 2),\n    panel.grid.minor.y = element_line(color = \"#B49CD2\", linetype = 3),\n    legend.background = element_rect(fill = \"#A0C8E8\"),\n    plot.background = element_rect(fill = \"#8ADDA8\"),\n    plot.title = element_text(size = 20),\n    plot.margin = unit(c(1, 4, 1, 3), \"cm\")\n  ) +\n  # some labeling\n  labs(x = \"Crab sizes (small to big)\",\n       y = \"Number of crabs (few to lots)\",\n       title = \"This is a crab histogram\",\n       fill = \"Places\") +\n  # adding the crab image\n  annotation_raster(crab_image, xmin = 8, xmax = 10, ymin = 30, ymax = 35) +\n  # annotating the plot with the photographer credit\n  annotate(geom = \"text\", x = 9, y = 29, label = \"PWhittle, iNaturalist\", size = 3)\n  \ncrab_hist\n\n\n\n\npatchwork thinks similarly to ggplot in that it takes things in layers with + signs, but also takes &. To be honest, I can’t remember the rules most of the time and I have to look them up.\n\n                       # this automatically recognizes that you're putting plots together (no function call!)\ncrab_plots_together <- crab_plot + crab_hist + \n  \n  # plot_layout: anything having to do with the way plots are arranged\n  # widths takes a ratio: the panel ratio will be 2:1 left:right\n  plot_layout(widths = c(2, 1)) + \n  \n  # plot_annotation: anything having to do with annotations\n  plot_annotation(tag_levels = \"A\", tag_suffix = \")\") & # annotating them with panel letters\n  \n  # patchwork has its own theme options!\n  theme(plot.tag = element_text(size = 40)) # changing the size of the annotations\n\n# display our beautiful plot  \ncrab_plots_together\n\n\n\n# saving the plot\nggsave(\n  filename = here::here(\"figures\", \n                        paste(\"crab_plot_and_hist_\", today(), \".jpg\", sep = \"\")),\n  plot = crab_plots_together,\n  width = 18, height = 8, units = \"in\",\n  dpi = 150\n)"
  },
  {
    "objectID": "code/ggplot-code-workshop.html",
    "href": "code/ggplot-code-workshop.html",
    "title": "Figure making in ggplot",
    "section": "",
    "text": "In the spirit of Emily Riederer’s ugliest ggplot ever, we’ll play around with ggplot code in order to learn how it works. The goal: make the ugliest plot possible."
  },
  {
    "objectID": "code/ggplot-code-workshop.html#manual-selections",
    "href": "code/ggplot-code-workshop.html#manual-selections",
    "title": "Figure making in ggplot",
    "section": "Manual selections",
    "text": "Manual selections\nYou can adjust the colors, shapes, axis limits, etc. using one of the scale_ functions (try ?scale_ to see the many options)."
  },
  {
    "objectID": "code/ggplot-code-workshop.html#themes",
    "href": "code/ggplot-code-workshop.html#themes",
    "title": "Figure making in ggplot",
    "section": "Themes",
    "text": "Themes\nA lot of customization comes from ggplot themes. Theme elements deal with everything else in the plot that doesn’t have to do with the data (e.g. the plot background, grid, etc.). There are a lot of arguments that you can stack up in theme() (try ?theme()) to see all of them, but they generally fall into a few categories: 1. axes, 2. legends, 3. panels, 4, plots, 5, strips. There are built-in themes in ggplot that can make your plot look pretty good right away, but playing around with theme elements yourself is a great way of getting the exact plot you want.\nAdditionally, every argument takes a function modifying the elements: 1. lines, 2. rectangles (more broadly, shapes), 3. text. See the help pages for these functions (e.g. ?element_text()) to figure out what you can alter about each element - there’s a lot!"
  },
  {
    "objectID": "code/ggplot-code-workshop.html#annotations",
    "href": "code/ggplot-code-workshop.html#annotations",
    "title": "Figure making in ggplot",
    "section": "Annotations",
    "text": "Annotations\nAnnotations are useful when you want to point something out on a plot. The function is annotate(), which adds an annotation layer onto your plot."
  },
  {
    "objectID": "code/ggplot-code-workshop.html#labels",
    "href": "code/ggplot-code-workshop.html#labels",
    "title": "Figure making in ggplot",
    "section": "Labels",
    "text": "Labels\nLastly, you can adjust any text on labels using the labs() function.\nNote: all the code in the theme below comes from Emily Riederer’s gist, with some modifications!\n\ncrab_plot <- ggplot(data = crab_data, aes(x = latitude, y = size)) +\n  geom_jitter(aes(color = site, shape = month), size = 3, alpha = 0.6) +\n  facet_wrap(~ month) +\n  \n  # scaling\n  # changing point colors + assigning each to a site\n  scale_color_manual(values = c(\"BC\" = \"#687f47\", \"CC\" = \"#268e86\", \"CT\" = \"#373f1f\", \n                                \"DB\" = \"#03010a\", \"GTM\" = \"#447c49\", \"JC\" = \"#2e2747\", \n                                \"NB\" = \"#7f696a\", \"NIB\" = \"#777a76\", \"PIE\" = \"#a87445\", \n                                \"RC\" = \"#aef23a\", \"SI\" = \"#e05357\", \"VCR\" = \"#087f0c\", \n                                \"ZI\" = \"#010201\")) +\n  # changing the point shapes\n  scale_shape_manual(values = c(\"7\" = 21, \"8\" = 18)) +\n  # changing x and y axis limits and breaks\n  scale_x_continuous(limits = c(29, 45)) +\n  scale_y_continuous(n.breaks = 10) +\n  \n  # theme() call\n  theme(\n    # panel: anything having to do with the main area\n    panel.background = element_rect(fill = '#B5C7F4', color = '#F761F9', linewidth = 5),\n    panel.border = element_rect(fill = NA, color = \"#87Bf18\", linewidth = 2),\n    panel.grid.major.x = element_line(color = \"#FF21E1\", linetype = 6),\n    panel.grid.minor.x = element_line(color = \"#2D65BF\", linetype = 4),\n    panel.grid.minor.y = element_blank()\n  ) +\n  # another theme() call: you don't have to split things up like this \n  # just doing it for ease of demonstration\n  theme(\n    # plot: anything having to do with the area around the panel\n    plot.background = element_rect(fill = \"#98FC6A\"),\n    plot.title = element_text(size = 30, hjust = 0.25, family = \"Helvetica\"),\n    plot.subtitle = element_text(size = 20, hjust = 0.75, color = \"#2A23A3\", family = \"Times New Roman\"),\n    plot.caption = element_text(size = 10, angle = 25, family = \"Comic Sans MS\"),\n    plot.margin = unit(c(1, 4, 1, 3), \"cm\")\n  ) +\n  theme(\n    # axes: anything having to do with the x- and y- axes\n    axis.title.x = element_text(face = \"bold.italic\", color = \"#9254D3\"),\n    axis.title.y = element_text(family = \"Arial\", face = \"bold\", size = 20, hjust = 0.25),\n    axis.text = element_text(face = \"italic\", size = 15),\n    # note that axis.text options from above are inherited\n    axis.text.x.bottom = element_text(angle = 180)\n  ) +\n  theme(\n    # strips: anything having to do with the facet titles\n    strip.background = element_rect(fill = \"#C9E886\"),\n    strip.text = element_text(color = \"#854EED\", family = \"Garamond\", face = \"bold\")\n  ) +\n  theme(\n    # legend: anything having to do with the legend\n    legend.background = element_rect(fill = \"#DC86E8\"), \n    legend.key = element_rect(fill = \"#C2F774\"),\n    legend.direction = \"horizontal\",\n    legend.position = \"top\",\n    legend.justification = \"left\",\n    legend.title = element_text(family = \"serif\", color = \"#B452F9\"),\n    legend.text = element_text(color = \"#30F92C\", family = \"mono\")\n  ) +\n  \n  # annotate: big gap\n  annotate(geom = \"text\", x = 32, y = 20, label = \"big gap\", color = \"#CC107D\") +\n  \n  # labs: anything having to do with labels\n  labs(title = \"Crabs!\",\n       subtitle = \"I love crabs\",\n       x = \"Latitude (low to high)\",\n       y = \"Size (small to big)\",\n       caption = \"Do you love crabs?\",\n       col = \"I love colors!\") \n\ncrab_plot\n\n\n\n\nThe last thing we’ll do is save the plot using ggsave(). The function needs you to tell it what the file name is in the first argument filename, but I’ll show you a little trick I use to 1) save the figure in a folder and 2) “version” the figure based on date (i.e. the file name for the figure has the date it was made in it). Both are extraneous, but things I like to do to keep my figures organized.\n\nggsave(\n  # specify a file name, but here we'll specify a file path\n             # choose the folder named \"figures\"\n  filename = here::here(\"figures\", \n                        # create a file name that includes the date using lubridate::today()\n                        # you could also use Sys.Date() - works the same way!\n                        paste(\"crab_plot_ugly_\", today(), \".jpg\", sep = \"\")),\n  # name the plot object you're wanting to save\n  plot = crab_plot,\n  # specify the dimensions and units\n  width = 10, height = 5, units = \"in\",\n  # specify resolution\n  dpi = 300\n)"
  },
  {
    "objectID": "code/ggplot-code-workshop.html#adding-images-to-plots",
    "href": "code/ggplot-code-workshop.html#adding-images-to-plots",
    "title": "Figure making in ggplot",
    "section": "Adding images to plots",
    "text": "Adding images to plots\nThere are many ways of adding images to plots. The package I’ll use is magick. This is a round-about way of getting an image in, but allows you to be flexible with your image types (gifs, etc.). I’ll just save this as an object called crab_image to use later.\n\n# use magick::image_read() to read in the jpeg\ncrab_image <- image_read(here::here(\"code\", \"pwhittle-fiddler-crab.jpeg\")) %>% \n  # turn this into a raster\n  as.raster()"
  },
  {
    "objectID": "code/ggplot-code-workshop.html#putting-plots-together",
    "href": "code/ggplot-code-workshop.html#putting-plots-together",
    "title": "Figure making in ggplot",
    "section": "Putting plots together",
    "text": "Putting plots together\nThere are a couple packages you can use to put plots together like panels in a figure. The big ones are patchwork and cowplot. Try each of them out and see what you like, but we’ll be using patchwork today.\nJust to demonstrate how this works, I’m going to make up a histogram of crab sizes. The code is annotated if you’re interested in the customized aesthetics, but they’re not important for this demonstration.\n\n# for a histogram, you don't need y in your aesthetic call\ncrab_hist <- ggplot(crab_data, aes(x = size)) +\n  # telling ggplot that you want to plot a histogram\n  geom_histogram(binwidth = 1, aes(fill = site)) +\n  # some scaling\n  scale_x_continuous(breaks = seq(from = 6.5, to = 24.5, by = 1)) +\n  scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +\n  scale_fill_manual(values = c(\"BC\" = \"#7D9084\", \"CC\" = \"#8B9FD9\", \"CT\" = \"#DDD5D5\", \n                               \"DB\" = \"#CADDA5\", \"GTM\" = \"#DF697F\", \"JC\" = \"#E09E5F\", \n                               \"NB\" = \"#7F56DB\", \"NIB\" = \"#D8DF5D\", \"PIE\" = \"#DC53D3\", \n                               \"RC\" = \"#84D9DF\", \"SI\" = \"#D798D1\", \"VCR\" = \"#77E2A8\", \n                               \"ZI\" = \"#76E762\")) +\n  # some theme-ing\n  theme(\n    panel.background = element_rect(fill = '#B6E45F', color = '#DABA84', linewidth = 5),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"#E16B86\", linetype = 2),\n    panel.grid.minor.y = element_line(color = \"#B49CD2\", linetype = 3),\n    legend.background = element_rect(fill = \"#A0C8E8\"),\n    plot.background = element_rect(fill = \"#8ADDA8\"),\n    plot.title = element_text(size = 20),\n    plot.margin = unit(c(1, 4, 1, 3), \"cm\")\n  ) +\n  # some labeling\n  labs(x = \"Crab sizes (small to big)\",\n       y = \"Number of crabs (few to lots)\",\n       title = \"This is a crab histogram\",\n       fill = \"Places\") +\n  # adding the crab image\n  annotation_raster(crab_image, xmin = 8, xmax = 10, ymin = 30, ymax = 35) +\n  # annotating the plot with the photographer credit\n  annotate(geom = \"text\", x = 9, y = 29, label = \"PWhittle, iNaturalist\", size = 3)\n  \ncrab_hist\n\n\n\n\npatchwork thinks similarly to ggplot in that it takes things in layers with + signs, but also takes &. To be honest, I can’t remember the rules most of the time and I have to look them up.\n\n                       # this automatically recognizes that you're putting plots together (no function call!)\ncrab_plots_together <- crab_plot + crab_hist + \n  \n  # plot_layout: anything having to do with the way plots are arranged\n  # widths takes a ratio: the panel ratio will be 2:1 left:right\n  plot_layout(widths = c(2, 1)) + \n  \n  # plot_annotation: anything having to do with annotations\n  plot_annotation(tag_levels = \"A\", tag_suffix = \")\") & # annotating them with panel letters\n  \n  # patchwork has its own theme options!\n  theme(plot.tag = element_text(size = 40)) # changing the size of the annotations\n\n# display our beautiful plot  \ncrab_plots_together\n\n\n\n\n\n# saving the plot\nggsave(\n  filename = here::here(\"figures\", \n                        paste(\"crab_plot_and_hist_\", today(), \".jpg\", sep = \"\")),\n  plot = crab_plots_together,\n  width = 18, height = 8, units = \"in\",\n  dpi = 150\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "figures-in-ggplot",
    "section": "",
    "text": "This is a collection of some data visualization workshops I have led."
  },
  {
    "objectID": "slides/seminar-slides.html#today",
    "href": "slides/seminar-slides.html#today",
    "title": "Figures in {ggplot}",
    "section": "Today",
    "text": "Today\n\n“Publication quality” definitions and figure sharing\n\nGeneral rules for data visualization\n\nDesign soapbox\n\nResources (not covered, just collected)\n\nPlaying around with code"
  },
  {
    "objectID": "slides/seminar-slides.html#publication-quality",
    "href": "slides/seminar-slides.html#publication-quality",
    "title": "Figures in {ggplot}",
    "section": "“Publication quality”",
    "text": "“Publication quality”\n\n\neasily digestible\n\naccessible: communicates in color or black and white, color-blind friendly\n\nscalable: image resizing without losing resolution\n\nstand-alone-able: tells a story behind the author’s question, synthesizes an abstract topic"
  },
  {
    "objectID": "slides/seminar-slides.html#figure-sharing",
    "href": "slides/seminar-slides.html#figure-sharing",
    "title": "Figures in {ggplot}",
    "section": "Figure sharing!",
    "text": "Figure sharing!\n\n\n\n\n\n\n\nThe Andes Through Time: Evolution and Distribution\n\n\n\n\nof Andean Floras (Perez-Escobar et al. 2022)"
  },
  {
    "objectID": "slides/seminar-slides.html#general-rule-1-convey-the-message",
    "href": "slides/seminar-slides.html#general-rule-1-convey-the-message",
    "title": "Figures in {ggplot}",
    "section": "General rule #1: Convey the message",
    "text": "General rule #1: Convey the message\n\n\n\n\nLegends and labels\n\nLegible text, symbols, etc.\n\nClearly visible data\n\nIntuitive color scheme\n\nRedundancy\n\n\n\n\n\n\n\n\n\n\nSource: palmerpenguins package"
  },
  {
    "objectID": "slides/seminar-slides.html#general-rule-2-minimize-noise",
    "href": "slides/seminar-slides.html#general-rule-2-minimize-noise",
    "title": "Figures in {ggplot}",
    "section": "General rule #2: Minimize noise",
    "text": "General rule #2: Minimize noise\n\n\n\n\nUse colors sparingly (color-blind friendly choices are great too)\n\nMinimize crowding\n\n\n\n\n\n\n\n\n\n\nSource: palmerpenguins package"
  },
  {
    "objectID": "slides/seminar-slides.html#design-soapbox-1",
    "href": "slides/seminar-slides.html#design-soapbox-1",
    "title": "Figures in {ggplot}",
    "section": "Design soapbox",
    "text": "Design soapbox\n\n\nFigures can’t always be reused\n\nMake your friends critique your figures\n\nKill your darlings\n\nAlways consider the audience!"
  },
  {
    "objectID": "slides/seminar-slides.html#resources",
    "href": "slides/seminar-slides.html#resources",
    "title": "Figures in {ggplot}",
    "section": "Resources",
    "text": "Resources\nGeneral Data Visualization\n- Dataviz Accessibility Resources\n- Writing Alt Text for Data Visualization\n\nGeneral Data Visualization\n- Fundamentals of Data Visualization, by Claus O. Wilke\n- R for Data Science (Ch. 3), by Garrett Grolemund & Hadley Wickham\n- A ggplot2 grammar guide, by Gina Reynolds\n- ggplot2 cheat sheet\n- ggplot2: Elegant Graphics for Data Analysis, by Hadley Wickham\nPlot themes/customization\n- Modifying components of a theme\n- Themes to Improve your ggplot Figures, by David Keyes\nPackages\n- patchwork (for putting plots together)\n- cowplot (also for putting plots together)\n- ggtext package (improved text rendering support for ggplot2)\nOther\n- stat_summary() tutorial, by Christian Burkhart"
  },
  {
    "objectID": "slides/seminar-slides.html#links",
    "href": "slides/seminar-slides.html#links",
    "title": "Figures in {ggplot}",
    "section": "Links",
    "text": "Links\n\nGitHub repo\n\nRMarkdown document\n\nKnitted HTML document"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I have created a couple of data visualization type workshops in the recent past - this is a repository of those materials! Feel free to use with credit!"
  },
  {
    "objectID": "crab-plot-workshop.html",
    "href": "crab-plot-workshop.html",
    "title": "crab plots",
    "section": "",
    "text": "Testing crab plot workshop page"
  }
]